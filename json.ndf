# Nial JSON Library (https://www.json.org/json-en.html)
  Once complete, all functions will have a `json_` prefix, and all important helpers will ge in a different library.
  Requires a Nial install with the NTABLES package installed. 
  See: https://github.com/niallang/Nial_Development/tree/master/BuildNial#creating-nial-packages
  Some ideas taken from: https://github.com/Dyalog/MiServer/blob/master/Core/JSON.dyalog

% Libraries ;


loaddefs './Unicode/unicode.ndf';

json_tokenize is op str {
  quotes := not (-1 drop (o link (`\ match str))) and (`" match str);
}

scanl is tr fn op start A { % requires identity element. ;
  each (op x {
    nonlocal start;
    start := start fn x
  }) A
}

% Utility functions ;
j_trim is op str {
  ws := char [9, 10, 11, 12, 13, 32];
  ws eachleft in str
};
json_error is op msg line { fault link msg 'At line: ' (string line); }

% conversion functions ;
% tonumber already exists in nial, and compatible with JSON. ;
json_tostring is op str {
  If not = link `" [first, last] str Then
    write fault 'Not a valid JSON string.';
    bye
  EndIf;
  i := 0;
  str := 1 drop (-1 drop str);
  out := '';
  While i < tally str Do
    curr := str@i;
    If curr = `\ Then
      curr := Case str@(i+1) From
        `": `" End
        `\: `\ End
        `/: `/ End
        `b: char 8 End
        `f: char 12 End
        `n: char 10 End
        `r: char 13 End
        `t: char 9 End
        `u: 
          hexstr := 4 take (i+1 drop str);
          If hexstr allin '0123456789abcdefABCDEF' Then
            char _hex hexstr;
            i := i + 2;
            'âˆª'
          Else
            write fault link 'not a valid unicode sequence: ''' hexstr `';
            bye
          EndIf End
        Else
          write fault link 'invalid escape character ''' curr `'; 
          bye
      EndCase;
      i := i + 1;
    EndIf;
    % write i out curr ;
    out := link out curr;
    i := i + 1;
  endwhile;
  out
}

 
